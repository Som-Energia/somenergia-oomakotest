#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
import argparse
import codecs
import unittest
import subprocess
from yamlns import namespace as ns
from consolemsg import step, error, success, fail, warn

from configdb import ooop as remoteErpConfig
from configdb import psycopg as dbcfg

dbcfg = ns(dbcfg)

testcases = ns.load("testcases.yaml")

oomako_path =  os.path.abspath(os.path.dirname(os.path.abspath(__file__)))

parser = argparse.ArgumentParser(
    description=
        "Manega els testos d'esquena contra esquena (b2b) de "
        "les plantilles en Mako de correu de l'OpenERP",
    epilog=
        "Si no s'especifica cap testcase es fan tots",
    )
subparsers = parser.add_subparsers(help='sub-command help', dest='subcommand')
for nargs, command, help in [
    ('*', 'test', "Executa els testos indicats contra l'entorn de proves"),
    ('*', 'accept', "Accepta les sortides dels testos indicats"),
    ('+', 'upload', "Puja a l'entorn de producció la plantilla indicada"),
    ('+', 'download', "Descarrega plantilla de l'entorn de producció"),
    ('',  'clean', "Neteja la cache del servidor remot"),
    ('',  'list', "Llista els casos de test disponibles"),
    ('',  'listtemplates', "Lista els templates al servidor"),
    ('',  'listrejecttemplates', "Llista els templates de rebuig al servidor"),
    ] :
    sub = subparsers.add_parser(command, help=help)
    if nargs:
        sub.add_argument('testcases', metavar='TESTCASE', nargs=nargs,)

args = parser.parse_args(sys.argv[1:]) # Warning: if no arguments does exit
sys.argv = sys.argv[:1]

def GetOOOP():
    from ooop import OOOP
    return OOOP(**remoteErpConfig)


def loadErp(dbcfg):
    sys.path.append(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),"../erp/server/bin")))

    root_path = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),"../erp/server"))
    addons_path =  os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),"../erp/server/bin/addons"))

    import netsvc
    import tools
    tools.config['db_name'] = dbcfg.database
    tools.config['db_host'] = dbcfg.host
    tools.config['db_user'] = dbcfg.user
    tools.config['db_password'] = dbcfg.password
    tools.config['db_port'] = dbcfg.port
    tools.config['root_path'] = root_path
    tools.config['addons_path'] = addons_path
    tools.config['oomako_path'] = oomako_path
    tools.config['log_level'] = None #'warn'
    tools.config['log_file'] = open('/dev/null','w')
    #tools.config['log_handler'] = [':WARNING']
    tools.config['init'] = []
    tools.config['demo'] = []
    tools.config['update'] = []

    import pooler
    import osv

    osv_ = osv.osv.osv_pool()
    db,pool = pooler.get_db_and_pool(tools.config['db_name'])
    netsvc.SERVICES['im_a_worker'] = True

    return db, pool

db=None
pool=None


def get_case_step(case, step_idx, pool, cursor, uid):
    if step_idx >= len(case.step_ids):
        error("El cas només te {} passos, fora de rang.".format(len(case.step_ids)))
        return {}
    sub_model, sub_id = case.step_ids[step_idx].pas_id.split(',')
    sub_obj= pool.get(sub_model)
    return sub_obj.browse(cursor,uid,sub_id)

def renderMakoReject(template, model, id, data, uid=1):
    from contextlib import closing

    with closing(db.cursor()) as cursor:
        makoinput = templateRead(template)

        for obj in pool.get(model).browse(cursor,uid,[id['id']]):
            env = {
                'user':pool.get('res.users').browse(cursor,uid,uid),
                'db': dbcfg.database,
            }
            import mako.template
            result = mako.template.Template(makoinput).render_unicode(
                cas=obj,
                pas=get_case_step(obj, id['pas'], pool, cursor, uid),
                env=env,
                format_exceptions=True,
                **data
                )
            return result

def renderMako(template, model, id, data, uid=1):
    from contextlib import closing

    with closing(db.cursor()) as cursor:
        makoinput = templateRead(template)
        #browse last param is OpenERP dict Context. The 'browse_reference' variable to True
        #force get all references in object (even one2many fields)
        for obj in pool.get(model).browse(cursor,uid,[id], {'browse_reference': True}):
            env = {
                'user':pool.get('res.users').browse(cursor,uid,uid),
                'db': dbcfg.database,
            }
            import mako.template
            result = mako.template.Template(makoinput).render_unicode(
                object=obj,
                peobject=obj,
                env=env,
                format_exceptions=True,
                **data
                )
            return result

def renderMakoPdf(template, report_id, id, data, uid=1):

    from contextlib import closing

    with closing(db.cursor()) as cursor:
        ctx = {}
        ir_obj = pool.get('ir.actions.report.xml')
        report_xml = ir_obj.browse(cursor, uid, report_id, context=ctx)
        report_xml.report_rml = None
        report_xml.report_rml_content = None
        report_xml.report_sxw_content_data = None
        m_data = {'model': report_xml.model, 'id': id, 'report_type': 'webkit'}

        from c2c_webkit_report import webkit_report
        from report import report_sxw
        from tools import config

        class report_webkit_html(report_sxw.rml_parse):
            def __init__(self, cursor, uid, name, context):
                super(report_webkit_html, self).__init__(cursor, uid, name,
                                                         context=context)
                self.localcontext.update({
                    'cursor': cursor,
                    'uid': uid,
                    'addons_path': config['addons_path'],
                })

        # forcing to use our .mako template
        report_xml.report_webkit = os.path.join(config['oomako_path'],template)

        wk = webkit_report.WebKitParser(
            "report."+report_xml.report_name,
            report_xml.model,
            None,
            parser=report_webkit_html
        )
        pdf = wk.create_single_pdf(cursor, uid, [id], m_data, report_xml, ctx)

        report_xml.webkit_debug = True
        html = wk.create_single_pdf(cursor, uid, [id], m_data, report_xml, ctx)

        return html[0],pdf[0]

def deleteIfExists(filename):
    if os.access(filename, os.R_OK) :
        os.unlink(filename)

def makeB2bTestCase(testCaseName, id) :
    def b2bTestCase(self):
        exit_code = 0
        self.maxDiff = None
        resultFilename = os.path.join('b2bdata',testCaseName+'-result.html')
        expectedFilename = os.path.join('b2bdata',testCaseName+'-expected.html')
        resultPdf = os.path.join('b2bdata',testCaseName+'-result.pdf')
        expectedPdf = os.path.join('b2bdata',testCaseName+'-expected.pdf')
        diffPdf = os.path.join('b2bdata',testCaseName+'-diff.pdf')

        deleteIfExists(resultFilename)
        deleteIfExists(resultPdf)
        deleteIfExists(diffPdf)

        if 'rejectId' in self.fixture:
            output = renderMakoReject(
                self.fixture.template,
                self.fixture.model,
                id,
                self.fixture.get('data', {}))
        elif 'poweremailId' in self.fixture:
            output = renderMako(
                self.fixture.template,
                self.fixture.model,
                id,
                self.fixture.get('data', {}))
        elif 'reportXmlId' in self.fixture:
            output,pdf = renderMakoPdf(
                self.fixture.template,
                self.fixture.reportXmlId,
                id,
                self.fixture.get('data', {}))

            with open(resultPdf,'wb') as f:
                f.write(pdf)

            if not os.path.exists(expectedPdf):
                warn("No expectation for the testMethod (pdf), use the 'accept' subcommand to accept the current result as good '{}'",expectedPdf)
            else:
                exit_code = subprocess.call([os.path.join(oomako_path,'pdfcmp.sh'),expectedPdf,resultPdf,diffPdf])
                if exit_code == 0: # identical
                    deleteIfExists(resultPdf)
                    deleteIfExists(diffPdf)

        else:
            warn("No suitable renderer found for {}"
                .format(testCaseName))
            output = ""

        try:
            with codecs.open(expectedFilename,'r', 'utf8') as expectedfile:
                expected = expectedfile.read()
        except:
            expected = None

        if expected != output :
            with codecs.open(resultFilename,'w', 'utf8') as outputfile:
                outputfile.write(output)

        if expected is None :
            self.fail(
                "No expectation for the testMethod, use the 'accept' "
                "subcommand to accept the current result as good '{}'"
                .format(resultFilename))

        self.assertMultiLineEqual(expected, output,
            "B2B data missmatch, use the 'accept' "
            "subcommand to accept the current result as good '{}'"
            .format(resultFilename))

        self.assertFalse(exit_code,
            "B2B PDF data missmatch, use the 'accept' "
            "subcommand to accept the current result as good '{}'"
            .format(resultPdf))

    return b2bTestCase

def addDataDrivenTestCases():
    for testCase, fixture in testcases.items() :
        klassname = 'Test_B2B_{0}'.format(testCase)
        # Dynamically create a TestCase Subclass with all the test
        testMethods = dict([
            ('test_{0}'.format(testMethod),
                makeB2bTestCase(
                    testCase+'.'+testMethod, data))
            for testMethod, data in fixture.cases.items()
            ]+[
                ('longMessage', True),
                ('fixture', fixture),
            ])

        step("creating test class for: {}",klassname)
        globals()[klassname] = type( klassname, (unittest.TestCase,), testMethods)

def test():
    filterEmptyTestcases()
    addDataDrivenTestCases()
    global db, pool
    if db is None or pool is None :
        db, pool = loadErp(dbcfg)
    unittest.TestCase.__str__ = unittest.TestCase.id
    sys.argv.append("--verbose"); print sys.argv
    unittest.main()

def getId(O, fixture, idLabel='poweremailId'):

    if idLabel not in fixture:
        return None

    if type(fixture[idLabel]) == int:
        return fixture[idLabel]

    module, name = fixture[idLabel].split('.')

    model, id = O.IrModelData.get_object_reference(module, name)

    return id

def getTemplate(O, fixture):
    return O.PoweremailTemplates.get(getId(O, fixture, 'poweremailId'))

def getRejectTemplate(O, fixture):
    return O.GiscedataSwitchingNotify.get(getId(O, fixture, 'rejectId'))

def templateWrite(filename, content):
    with codecs.open(filename, 'w', 'utf8') as f:
        f.write(content)

def templateRead(filename):
    with codecs.open(filename, 'r', 'utf8') as f:
        newContent = f.read()
    return newContent

def downloadTemplate(O, name, fixture):
    template = getTemplate(O, fixture)
    step("Fetching {}...".format(name))
    templateWrite(fixture.template,template.def_body_text)
    if fixture.get('model') != template.model_int_name:
        warn("Compte, el model hauria de ser '{}'"
            .format(template.model_int_name))

    headers = ns(
        to=template.def_to,
        cc=template.def_cc,
        bcc=template.def_bcc,
        subject=template.def_subject,
        subject_translations=ns(),
    )
    for translation in O.IrTranslation.filter(
            name='poweremail.templates,def_subject',
            res_id=template.id,
            ):
        headers.subject_translations[translation.lang] = translation.value

    print ("HEADER:\n",  headers.dump())
    headers.dump(fixture.template+'.yaml')

def downloadRejectionTemplate(O, name, fixture):
    template = getRejectTemplate(O, fixture)
    step("Fetching {}...".format(name))
    templateWrite(fixture.template,template.notify_text)
    step("Done in {}...".format(fixture.template))

def downloadPdfTemplate(O, case, fixture):
    warn("WIP")

def uploadTemplate(O, case, fixture):
    template = getTemplate(O, fixture)
    newContent = templateRead(fixture.template)
    templateWrite("backup-{}.mako".format(case), template.def_body_text)
    template.def_body_text = newContent
    template.save()

    for translation in O.IrTranslation.filter(
            name='poweremail.templates,def_body_text',
            res_id=template.id,
            ):
        step("Uploading {} translation {}...".format(case,translation.lang))
        templateWrite("backup-{}-translation-{}.mako".format(case,translation.lang), translation.value)
        translation.value=newContent
        translation.save()

    headers = ns.load(fixture.template+'.yaml')

    template.def_to = headers.to
    template.def_cc = headers.cc
    template.def_bcc = headers.bcc
    template.def_subject = headers.subject
    template.save()

    for translation in O.IrTranslation.filter(
            name='poweremail.templates,def_subject',
            res_id=template.id,
            ):
        step("Uploading {} subject translation {}...".format(case,translation.lang))
        translation.src=headers.subject
        templateWrite("backup-{}-subject-translation-{}.mako".format(case,translation.lang), translation.value)
        translation.value=headers.subject_translations[translation.lang]
        translation.save()

    cleanRemoteCache(O)

def uploadRejectionTemplate(O, case, fixture):
    template = getRejectTemplate(O, fixture)
    newContent = templateRead(fixture.template)
    templateWrite("backup-{}.mako".format(case), template.notify_text)
    template.notify_text = newContent
    template.save()

    cleanRemoteCache(O)

def uploadPdfTemplate(O, case, fixture):
    warn("WIP")

def cleanRemoteCache(O):
    wiz_obj = O.WizardCleanCache
    wiz_id = wiz_obj.create({})
    wiz_obj.action_clean_cache([wiz_id])
    result = wiz_obj.read(wiz_id,['info'])
    success("Remote Erp cache cleaned with message: {}",result[0]['info'])

def clean():
    O = GetOOOP()
    cleanRemoteCache(O)

def filterArgsnotInTestcases():
    notFound = set(args.testcases).difference(set(testcases.keys()))
    if notFound:
        fail("Els cassos {} no estan a testcases.yaml"
            .format(', '.join(notFound)))

def filterEmptyTestcases():
    if not testcases:
        fail("El fitxer testcases.yaml esta buit")

def download():
    filterEmptyTestcases()
    filterArgsnotInTestcases()
    O = GetOOOP()
    for name, fixture in testcases.items():
        if args.testcases and name not in args.testcases:
            continue

        if 'poweremailId' in fixture:
            downloadTemplate(O, name, fixture)
        elif 'rejectId' in fixture:
            downloadRejectionTemplate(O, name, fixture)
        elif 'reportXmlId' in fixture:
            downloadPdfTemplate(O, name, fixture)
        else:
            step("Download not implemented for {}...".format(name))

def upload():
    filterEmptyTestcases()
    filterArgsnotInTestcases()
    O = GetOOOP()
    step("Uploading to {uri}:{port} as {user}".format(**remoteErpConfig))
    for case in args.testcases:
        step("Uploading {}...".format(case))
        fixture = testcases[case]
        if 'poweremailId' in fixture:
            uploadTemplate(O, case, fixture)
        elif 'rejectId' in fixture:
            uploadRejectionTemplate(O, case, fixture)
        elif 'reportXmlId' in fixture:
            uploadPdfTemplate(O, name, fixture)
        else:
            step("Upload not implemented for {}...".format(case))

def listtemplates():
    O = GetOOOP()
    success('List of available erp templates:')
    print "id model nom"
    for t in O.PoweremailTemplates.all():
        print u'{:<3} {} "{}"'.format(t.id, t.model_int_name, t.name)

def listrejecttemplates():
    O = GetOOOP()
    success('List of available erp rejetion templates:')
    print "id pas cas info del rebuig"
    for t in O.GiscedataSwitchingNotify.all():
        print u'{:<3} {} {} "{}"'.format(t.id, t.proces_id.name, t.step_id.name, t.info_rebuig)

def iterTestCases():
    for testCaseName, fixture in testcases.items():
        for testMethod, id in fixture.cases.items():
            yield testCaseName+'.'+testMethod, fixture, id

def list():
    filterEmptyTestcases()
    success('List of available test cases:')
    for testCase, fixture, id in iterTestCases():
        print testCase

def accept():
    filterEmptyTestcases()
    import shutil
    success('Accepting test cases:')
    for testcase, fixture, id in iterTestCases():
        resultFilename = os.path.join('b2bdata',testcase+'-result.html')
        expectedFilename = os.path.join('b2bdata',testcase+'-expected.html')
        resultPdf = os.path.join('b2bdata',testcase+'-result.pdf')
        expectedPdf = os.path.join('b2bdata',testcase+'-expected.pdf')
        diffPdf = os.path.join('b2bdata',testcase+'-diff.pdf')
        if os.access(resultFilename, os.R_OK):
            step("Accepting "+testcase)
            shutil.move(resultFilename, expectedFilename)
        if os.access(resultPdf, os.R_OK):
            step("Accepting pdf "+testcase)
            shutil.move(resultPdf, expectedPdf)
            deleteIfExists(diffPdf)


if __name__ == '__main__' :
    if args.subcommand not in globals() :
        error("Command '{}' not yet implemented".format(args.subcommand))
        sys.exit(-1)

    globals()[args.subcommand]()
    sys.exit(0)

# vim: et ts=4 sw=4
